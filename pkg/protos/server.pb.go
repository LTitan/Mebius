// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/protos/server.proto

package protos

import (
	context "context"
	fmt "fmt"
	types "github.com/LTitan/Mebius/pkg/protos/types"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("pkg/protos/server.proto", fileDescriptor_bfa55bbbe0c38e8f) }
func init() { golang_proto.RegisterFile("pkg/protos/server.proto", fileDescriptor_bfa55bbbe0c38e8f) }

var fileDescriptor_bfa55bbbe0c38e8f = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0xc8, 0x4e, 0xd7,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x2f, 0xd6, 0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x03, 0xf3,
	0x84, 0x94, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x7c, 0x42, 0x32,
	0x4b, 0x12, 0xf3, 0xf4, 0x7c, 0x53, 0x93, 0x32, 0x4b, 0x8b, 0xf5, 0x0a, 0xb2, 0xd3, 0x21, 0x6a,
	0x8a, 0xa5, 0x74, 0x11, 0x8a, 0xf4, 0xd3, 0xf3, 0xd3, 0xf3, 0x21, 0x26, 0x25, 0x95, 0xa6, 0x81,
	0x79, 0x60, 0x0e, 0x98, 0x05, 0x51, 0x2f, 0x65, 0x89, 0xa4, 0x1c, 0x62, 0xa6, 0x3e, 0xc4, 0x4c,
	0x7d, 0x24, 0x57, 0x94, 0x54, 0x16, 0xa4, 0x16, 0xeb, 0xa7, 0xa7, 0xe6, 0xa5, 0x16, 0x25, 0x96,
	0xa4, 0xa6, 0x40, 0xb5, 0x9a, 0xa3, 0xdb, 0x94, 0x9e, 0x9f, 0x9f, 0x9e, 0x93, 0x9a, 0x58, 0x90,
	0x59, 0x0c, 0x65, 0xea, 0x27, 0x16, 0x64, 0xea, 0x27, 0xe6, 0xe5, 0xe5, 0x97, 0x24, 0x96, 0x64,
	0xe6, 0xe7, 0x15, 0x43, 0x34, 0x1a, 0xad, 0x65, 0xe4, 0x62, 0x0b, 0x06, 0x7b, 0x4c, 0x68, 0x11,
	0x23, 0x17, 0x97, 0x7b, 0x6a, 0x89, 0x6f, 0x62, 0x72, 0x46, 0x66, 0x5e, 0xaa, 0x90, 0xa5, 0x1e,
	0x11, 0x5e, 0xd4, 0x03, 0x3b, 0x47, 0xcf, 0xb5, 0x22, 0x31, 0xb7, 0x20, 0x27, 0x35, 0x28, 0xb5,
	0xb0, 0x34, 0xb5, 0xb8, 0x44, 0xca, 0x8a, 0x1c, 0xad, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x4a,
	0xb2, 0x4d, 0x97, 0x9f, 0x4c, 0x66, 0x12, 0x17, 0x12, 0x05, 0x3b, 0xb8, 0xcc, 0x30, 0x31, 0xa7,
	0x20, 0x23, 0xd1, 0x50, 0x3f, 0x17, 0xe2, 0x2a, 0x27, 0x87, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c,
	0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0xf1, 0xc0, 0x63, 0x39, 0xc6, 0x13, 0x8f, 0xe5, 0x18, 0xa3,
	0xb4, 0x88, 0x08, 0x39, 0x6b, 0x08, 0x95, 0xc4, 0x06, 0xa6, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x23, 0xe2, 0xe3, 0x1f, 0xdb, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerClient interface {
	GetMachine(ctx context.Context, in *types.ExampleRequest, opts ...grpc.CallOption) (*types.ExampleResponse, error)
}

type serverClient struct {
	cc *grpc.ClientConn
}

func NewServerClient(cc *grpc.ClientConn) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) GetMachine(ctx context.Context, in *types.ExampleRequest, opts ...grpc.CallOption) (*types.ExampleResponse, error) {
	out := new(types.ExampleResponse)
	err := c.cc.Invoke(ctx, "/github.com.LTitan.Mebius.pkg.protos.Server/GetMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
type ServerServer interface {
	GetMachine(context.Context, *types.ExampleRequest) (*types.ExampleResponse, error)
}

// UnimplementedServerServer can be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (*UnimplementedServerServer) GetMachine(ctx context.Context, req *types.ExampleRequest) (*types.ExampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachine not implemented")
}

func RegisterServerServer(s *grpc.Server, srv ServerServer) {
	s.RegisterService(&_Server_serviceDesc, srv)
}

func _Server_GetMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.LTitan.Mebius.pkg.protos.Server/GetMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetMachine(ctx, req.(*types.ExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Server_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.LTitan.Mebius.pkg.protos.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMachine",
			Handler:    _Server_GetMachine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/protos/server.proto",
}
