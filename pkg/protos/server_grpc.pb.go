// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.5
// source: pkg/protos/server.proto

package protos

import (
	context "context"
	types "github.com/LTitan/Mebius/pkg/protos/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerClient interface {
	GetMachine(ctx context.Context, in *types.ExampleRequest, opts ...grpc.CallOption) (*types.ExampleResponse, error)
	Heartbeat(ctx context.Context, in *types.HeartbeatRequest, opts ...grpc.CallOption) (*types.HeartbeatResponse, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) GetMachine(ctx context.Context, in *types.ExampleRequest, opts ...grpc.CallOption) (*types.ExampleResponse, error) {
	out := new(types.ExampleResponse)
	err := c.cc.Invoke(ctx, "/github.com.LTitan.Mebius.pkg.protos.Server/GetMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Heartbeat(ctx context.Context, in *types.HeartbeatRequest, opts ...grpc.CallOption) (*types.HeartbeatResponse, error) {
	out := new(types.HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/github.com.LTitan.Mebius.pkg.protos.Server/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
// All implementations should embed UnimplementedServerServer
// for forward compatibility
type ServerServer interface {
	GetMachine(context.Context, *types.ExampleRequest) (*types.ExampleResponse, error)
	Heartbeat(context.Context, *types.HeartbeatRequest) (*types.HeartbeatResponse, error)
}

// UnimplementedServerServer should be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (UnimplementedServerServer) GetMachine(context.Context, *types.ExampleRequest) (*types.ExampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachine not implemented")
}
func (UnimplementedServerServer) Heartbeat(context.Context, *types.HeartbeatRequest) (*types.HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}

// UnsafeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServer will
// result in compilation errors.
type UnsafeServerServer interface {
	mustEmbedUnimplementedServerServer()
}

func RegisterServerServer(s grpc.ServiceRegistrar, srv ServerServer) {
	s.RegisterService(&Server_ServiceDesc, srv)
}

func _Server_GetMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.LTitan.Mebius.pkg.protos.Server/GetMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetMachine(ctx, req.(*types.ExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.LTitan.Mebius.pkg.protos.Server/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Heartbeat(ctx, req.(*types.HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Server_ServiceDesc is the grpc.ServiceDesc for Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.LTitan.Mebius.pkg.protos.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMachine",
			Handler:    _Server_GetMachine_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Server_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/protos/server.proto",
}
